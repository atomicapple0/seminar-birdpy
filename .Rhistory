read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
levels(robin_2000$urban)
group_by(my_data, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE),
median = median(weight, na.rm = TRUE),
IQR = IQR(weight, na.rm = TRUE)
)
levels(robin_2000$urban)
levels(robin_2000) <- c('urban', 'rural')
View(robin_2000)
levels(robin_2000)
robin_2000
robin_2000
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin-', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
levels(robin_2000) <- c('urban', 'rural')
levels(robin_2000)
robin_2000
group_by(my_data, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE),
median = median(weight, na.rm = TRUE),
IQR = IQR(weight, na.rm = TRUE)
)
robin-2000_factor
factor(robin-2000)
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
factor(robin-2000)
factor(robin2000)
robin2000
robin2000$urban
robin2000$urban_factor
robin2000$urban
robin2000_factor
robin2000$urban_factor
robin2000$urban_factor <- factor(robin2000$urban, ordered = TRUE, levels = c('0','1'))
factor(robin2000$urban, levels = c('0','1'),levels = c('rural','urban'))
robin2000$urban_0
robin2000_0
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
head(robin2000)
levels(robin2000$urban)
install.packages("ggpubr")
library(ggpubr)
ggboxplot(robin2000, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
ggboxplot(robin2000, x = 'urban', y = 'date',
color = "group", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
ggboxplot(robin2000, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
robin2000 <- rep(robin2000$date, robin2000$count)
robin2000
ggboxplot(robin2000, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
library(ggpubr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
head(robin2000)
levels(robin2000$urban)
ggboxplot(robin2000, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
library(ggpubr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin.', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
head(robin.2000)
robin.2000.freq= as.vector(rep(df$Overall.Cond, df$Freq))
robin.2000.freq= as.vector(rep(df$date, df$count))
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
library(ggpubr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
head(robin.2000)
levels(robin.2000$urban)
robin.2000freq= as.vector(rep(df$date, df$count))
ggboxplot(robin2000, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
library(ggpubr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
robin2000.freq= as.vector(rep(df$date, df$count))
head(robin2000)
levels(robin2000$urban)
(robin$date, robin$count)
vec
robin = robin2000
vec <- rep(robin$date, robin$count)
vec
robin = filter(robin2000,urban == '0')
robin
View(robin)
robinRural = filter(robin2000,urban == '0')
robinUrban = filter(robin2000,urban == '1')
vecRural <- rep(robinRural$date, robin$count)
vecUrban <- rep(robinUrban$date, robin$count)
vecRural <- rep(robinRural$date, robin$count)
vecUrban <- rep(robinUrban$date, robin$count)
robinRural = filter(robin2000,urban == '0')
robinUrban = filter(robin2000,urban == '1')
vecRural <- rep(robinRural$date, robinRural$count)
vecUrban <- rep(robinUrban$date, robinUrban$count)
df <- data.frame(cond=c(rep("rural", times=length(robinRural)),
rep("urban", times=length(robinUrban))),
rating=c(robinRural, robinUrban))
View(robinUrban)
df <- data.frame(cond=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
rating=c(vecRural, vecUrban))
View(df)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
ggboxplot(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
order = c('0','1'),
ylab = "Weight", xlab = "Treatment")
ggboxplot(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
ggplot(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
ggboxplot(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
qplot(df, x = 'urban', y = 'date', geom="histogram")
ggplot(df, aes(x = 'urban', y = 'date'), geom="histogram")
ggboxplot(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
ggplot(df, aes(x = urban, y = date), geom="histogram")
gghistogram(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
gghistogram(df, x = 'urban', y = 'date',
color = 'urban', palette = c("#00AFBB", "#E7B800", "#FC4E07"),
ylab = "Weight", xlab = "Treatment")
gghistogram(df, x = 'urban', y = 'date')
gghistogram(df, x = 'date')
gghistogram(df, x = 'date', color = 'urban')
robin = robin2018
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
robin = robin2000
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
gghistogram(df, x = 'date', color = 'urban')
robin = robin2000
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
robin = robin2018
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
robin = robin2000
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
View(robinUrban)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
robin = robin2012
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
gghistogram(df, x = 'date', color = 'urban')
gghistogram(df, x = 'date', color = 'urban')
df
gghistogram(df, x = 'date', color = 'urban')
robin = robin2018
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
df
gghistogram(df, x = 'date', color = 'urban')
#delete dataframes
ls()
rm(list = ls())
library(readr)
library(dplyr)
library(ggpubr)
years = 2000:2018
#import shit
folder <- "/Users/brian/Desktop/birdPy/c03_robin/"
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(paste('robin', substr(file_list[i],11,14), sep=''),
read_csv(paste(folder, file_list[i], sep=''),
col_types = cols(X1 = col_skip(),
date = col_date(format = '%Y-%m-%d'),
urban = col_factor(levels = c("0", "1"))
)
)
)
}
robin = robin2018
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
df
gghistogram(df, x = 'date', color = 'urban')
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robin$date, robinRural$count)
vecUrban <- rep(robin$date, robinUrban$count)
robinRural$count
vecRural <- rep(robin$date, robinRural$count)
vecRural <- rep(robinRural$date, robinRural$count)
vecUrban <- rep(robinRural$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
vecRural <- rep(robinRural$date, robinRural$count)
robin = robin2018
head(robin)
levels(robnin$urban)
robinRural = filter(robin,urban == '0')
robinUrban = filter(robin,urban == '1')
vecRural <- rep(robinRural$date, robinRural$count)
vecUrban <- rep(robinUrban$date, robinUrban$count)
df <- data.frame(urban=c(rep("rural", times=length(vecRural)),
rep("urban", times=length(vecUrban))),
date=c(vecRural, vecUrban))
df
gghistogram(df, x = 'date', color = 'urban')
(df, x = 'date', color = 'urban')
gghistogram(df, x = 'date', color = 'urban', fill = "sex",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "sex",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "sex",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "urban",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', add = "mean", fill = "urban",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "urban",
palette = c("#00AFBB", "#E7B800"), add_density = TRUE)
gghistogram(df, x = 'date', color = 'urban', add = "mean", fill = "urban",
palette = c("#00AFBB", "#E7B800"), add_density = TRUE)
gghistogram(df, x = 'date', color = 'urban' fill = "urban",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "urban",
palette = c("#00AFBB", "#E7B800"))
kruskal.test(date ~ urban, data = bin)
kruskal.test(date ~ urban, data = bin)
kruskal.test(date ~ urban, data = robin)
kruskal.test(date ~ urban, data = robin)
ggline(my_data, x = "urban", y = "date",
add = c("mean_se", "jitter"),
order = c("rural", "urban"),
ylab = "date", xlab = "urban")
ggline(df, x = "urban", y = "date",
add = c("mean_se", "jitter"),
order = c("rural", "urban"),
ylab = "date", xlab = "urban")
ggline(df, x = "urban", y = "date",
order = c("rural", "urban"),
ylab = "date", xlab = "urban")
gghistogram(df, x = 'date', color = 'urban', fill = "urban",
palette = c("#00AFBB", "#E7B800"))
gghistogram(df, x = 'date', color = 'urban', fill = "urban",
palette = c("#00AFBB", "#E7B800"))
df
ggline(df, x = "urban", y = "date",
order = c("rural", "urban"),
ylab = "date", xlab = "urban")
ggplot(df, aes(x = date)) +
geom_histogram(aes(y = ..density.. * 5), binwidth = 5) +
geom_vline(aes(xintercept = 95.25), colour = "red", size = 1.3) +
facet_grid(Year ~ .) +
labs(title = "Size by Year", x = "Length", y = "frequency") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_bw() +
theme(
text = element_text(size = 16),
axis.text.y = element_text(size = 12)
)
ggplot(df, aes(x = date)) +
geom_histogram(aes(y = ..density.. * 5), binwidth = 5) +
geom_vline(aes(xintercept = 95.25), colour = "red", size = 1.3) +
facet_grid(urban ~ .) +
labs(title = "Size by Year", x = "date", y = "frequency") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_bw() +
theme(
text = element_text(size = 16),
axis.text.y = element_text(size = 12)
)
ggplot(df, aes(x = date)) +
geom_histogram(aes(y = ..density.. * 5), binwidth = 5) +
facet_grid(urban ~ .) +
labs(title = "Size by Year", x = "date", y = "frequency") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_bw() +
theme(
text = element_text(size = 16),
axis.text.y = element_text(size = 12)
)
ggplot(df, aes(x = date)) +
geom_histogram(aes(y = ..density.. * 5), binwidth = 5) +
facet_grid(urban ~ .) +
labs(title = "Size by Year", x = "date", y = "frequency") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
theme_bw() +
theme(
text = element_text(size = 16),
axis.text.y = element_text(size = 12)
)
